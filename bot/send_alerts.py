# -*- coding: utf-8 -*-

import json
import config
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
bot = telebot.TeleBot(config.token)

from time import sleep, strftime
from datetime import datetime

from db import *
from sqlalchemy.orm import sessionmaker, scoped_session
session = scoped_session(sessionmaker(bind=engine))
from sqlalchemy import desc


# TODO –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤
users = session.query(User).all()
# from IPython import embed; embed()

# –£ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
for user in users:

    print('\nNAME:\t\t', user.name)
    print('ID:\t\t', user.tele_id)
    print('LAST JOB\t', user.last_job)
    print('CATEGORY:\t', user.category)
    
    if user.category == 'unsubscribed' or user.category == 'deleted': continue

    try: # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–∞–±–æ—Ç—É
        # from IPython import embed; embed()
        last_job_in_category = session.query(Job).\
                               filter(Job.category == user.category).\
                               order_by(Job.id.desc()).first().id
        print('LAST IN CATEGORY', last_job_in_category)
    # except TypeError:
    except AttributeError:
        print('All categories')
        category = 'all'
        cur = session.execute("SELECT id FROM job ORDER BY id DESC")
        print(cur.fetchone()[0])
        last_job_in_category = cur.fetchone()[0]
        
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –≤ –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª–µ–µ –Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞
    if user.last_job < last_job_in_category:
        # –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —é–∑–µ—Ä—É –µ—ë
        if user.category == 'all':
            cur = session.execute("SELECT id, title, parse_date, price, url, description, category \
                                   FROM job \
                                   WHERE id > {} \
                                   ORDER BY date(parse_date) \
                                   LIMIT 3".format(user.last_job))
        else:
            cur = session.execute("SELECT id, title, parse_date, price, url, description \
                                   FROM job \
                                   WHERE category = '{}' AND id > {} \
                                   ORDER BY date(parse_date) \
                                   LIMIT 3".format(user.category, user.last_job))
        jobs = cur.fetchall()

        for job in jobs:
            # print(len(job))
            if not job.description: text = '-'
            else: text = str(job.description)
            
            price = job.price
            if job.price == None: price = '-+-'

            job_date = datetime.strptime(job[2], "%Y-%m-%d %H:%M:%S.%f")

            print(job[2], job_date)
            #print(type(job_date))
            job_text = "‚õè <b>{}</b>".format(str(job[1].strip())  + \
                       "\n\nüíé –ù–∞–≥—Ä–∞–¥–∞: {}".format(price) + \
                       "\n‚è≥ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: {} #Ô∏è‚É£ {}".format(job_date.strftime("%Y-%m-%d %H:%M:%S"), job[0])) + \
                       "\nüìú {}".format(text) #+ \
                       #"\nüåê <a href='{}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>".format(job.url.strip())
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("üåê –ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=job.url.strip()))
            try: # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É —é–∑–µ—Ä—É
                bot.send_message(user.tele_id, job_text, parse_mode='HTML', reply_markup=markup, disable_web_page_preview=True)
                #print(job_text)
            except telebot.apihelper.ApiException as e:
                print('HTTP ERROR -', e.result.text)
                if '403' in e.result.text:
                    # –ï—Å–ª–∏ —é–∑–µ—Ä –æ—Ç—Ä—É–±–∏–ª –±–æ—Ç–∞, –ø–æ–º–µ—Ç–∏—Ç—å –≤ –±–∞–∑–µ –∏ –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Å–ª–∞—Ç—å
                    # –ü–æ–º–µ–Ω—è–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ unsubscribed
                    print('NEED UNSUBSCRIBE for:', user.tele_id)
                    session.query(User).\
                            filter(User.tele_id == user.tele_id).\
                            update({'category': 'unsubscribed'})
                if '400' in e.result.text:
                    # –ï—Å–ª–∏ —é–∑–µ—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∫–∞–∫–æ–π-—Ç–æ –≥–ª—é–∫ –∏ –º–Ω–æ–≥–æ —é–∑–µ—Ä–æ–≤ —É–ª–µ—Ç–∞–µ—Ç –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é)
                    print('NEED DELETE for:', user.tele_id)
                    # session.query(User).\
                    #         filter(User.tele_id == user.tele_id).\
                    #         update({'category': 'deleted'})

                # session.commit()
            last_id = job[0]
            #print('SENDING: ', last_id, job[4], '\n')

            # TODO –ü–æ–º–µ–Ω—è—Ç—å –µ–º—É –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–∞–±–æ—Ç—É
            sql = "UPDATE users SET last_job = '{}' \
                   WHERE tele_id = '{}'".format(last_id, user.tele_id)
            session.execute(sql)
            session.commit()

session.close()

            # # pause
            # sleep(0.300)

    # break # for sending only to me
